@model IEnumerable<CourseProject.Models.EventSchedule>

@{
    ViewData["Title"] = "Calendar - " + (ViewData["UserName"] ?? "All Events");
}

<script src="https://cdn.dhtmlx.com/scheduler/edge/dhtmlxscheduler.js"></script>
<link href="https://cdn.dhtmlx.com/scheduler/edge/dhtmlxscheduler.css"
      rel="stylesheet" type="text/css" charset="utf-8">
<style type="text/css">
    .event_requested {
        --dhx-scheduler-event-background: #D4B431;
    }

    .event_review {
        --dhx-scheduler-event-background: #D47E31;
    } 
</style>

<h2>Calendar for: @ViewData["UserName"]</h2>

<div id="scheduler_here" class="dhx_cal_container" style='width:100%; height:100vh;'>
    <div class="dhx_cal_navline">
        <div class="dhx_cal_prev_button">&nbsp;</div>
        <div class="dhx_cal_next_button">&nbsp;</div>
        <div class="dhx_cal_today_button"></div>
        <div class="dhx_cal_date"></div>
        <div class="dhx_cal_tab" name="day_tab"></div>
        <div class="dhx_cal_tab" name="week_tab"></div>
        <div class="dhx_cal_tab" name="month_tab"></div>
    </div>
    <div class="dhx_cal_header"></div>
    <div class="dhx_cal_data"></div>
</div>
<script>
    scheduler.plugins({
        recurring: true,
        multiselect: true
    });
    scheduler.config.date_format = "%Y-%m-%d %H:%i";
    scheduler.init("scheduler_here", new Date(2019, 0, 20), "week");

    const rolePermissions = [
        {role: "ADMIN", permissions: ["create", "update", "delete"], disabledFields: []},
        {role: "RESIDENT", permissions: ["create", "update", "delete"], disabledFields: ["Resident", "Employees", "Status"]},
        {role: "EMPLOYEE", permissions: [], disabledFields: ["Service", "Resident", "Employees", "Status", "recurring", "time"]},
        {role: "HOUSING_MANAGER", permissions: ["create", "update", "delete"], disabledFields: ["Employees"]},
        {role: "HR_MANAGER", permissions: ["update"], disabledFields: ["Resident", "recurring", "time"]},
        {role: "NONE", permissions: [], disabledFields: ["Service", "Resident", "Employees", "Status", "recurring", "time"]},
    ]

    const statusList = [
        {key: 'requested', label: "Requested"},
        {key: 'review', label: "Review Required"},
        {key: 'approved', label: "Approved"}
    ]

    scheduler.templates.event_class=function(start, end, event){
        var css = "";

        if(event.status) // if event has status property then special class should be assigned
            css += "event_"+event.status;

        return css; // default return
    };

    scheduler.config.lightbox.sections = [
        { name: "Service", map_to: "service_id", type: "select", options: scheduler.serverList("services") },
        { name: "Resident", map_to: "resident_id", type: "select", options: scheduler.serverList("residents") },
        { name: "Employees", map_to: "employee_ids", type: "multiselect", options: scheduler.serverList("employees") },
        { name: "Status", map_to: "status", type: "select", options: statusList },
        { name: "recurring", type: "recurring", map_to: "rrule" },
        { name: "time", height: 72, type: "time", map_to: "auto" }
    ];

    scheduler.attachEvent("onLightbox", (eventId) => {
        // console.log(scheduler.getEvent(eventId))
        setPermissions()
    })

    function setPermissions() {
        let userRole = scheduler.serverList("role")
        if (userRole && userRole.length > 0 && userRole[0].label) {
            userRole = userRole[0].label
        } else {
            userRole = "NONE"
        }

        const userPermissions = rolePermissions.find(rp => rp.role == userRole)
        let disableFields
        if (!userPermissions)
            disableFields = ["Service", "Resident", "Employees", "Status", "recurring", "time"]
        else
            disableFields = userPermissions.disabledFields

        disableFields.forEach(field => {
            const section = scheduler.formSection(field);
            if (field == "recurring" || field == "time") {
                section.node.querySelectorAll("select").forEach(elem => {
                    elem.disabled = true
                })
            } else if (field == "Employees") {
                section.node.querySelectorAll("input").forEach(elem => {
                    elem.disabled = true
                })
            } else {
                section.control.disabled = true;
            }
        })
    }

    scheduler.attachEvent("onEventAdded", (id, ev, is_new) => {
        updateEventName(ev)
    })

    scheduler.attachEvent("onEventChanged", (id, ev, is_new) => {
        console.log("event changed: ", ev)
        updateEventName(ev)
    })

    function updateEventName(ev) {
        let selectedServiceId = ev.service_id;

        // Find the corresponding service label from scheduler's server list
        let serviceList = scheduler.serverList("services");
        let selectedService = serviceList.find(service => service.key == selectedServiceId);

        // Update the description with the service label
        if (selectedService) {
            ev.text = selectedService.label; // Setting the event text
        }

        return true;
    }

    // load data from backend
    scheduler.load("/api/events?userId=" + @ViewData["UserID"])

    // connect backend to scheduler
    var dp = scheduler.createDataProcessor({
        url: "/api/events",
        more: "REST"
    });
    dp.init(scheduler);

    dp.attachEvent("onBeforeDataSending", function (id, state, data) {
        console.log("Data being sent:", state);
        console.log("Data being sent:", data);
        return true;
    });
</script>
