name: Reusable CI/CD Pipeline

on:
  workflow_call:
    inputs:
      configuration:
        required: true
        type: string
      dotnet_version:
        required: true
        type: string
      project_path:
        required: true
        type: string
      unit_test_project_path:
        required: false
        type: string
        default: ""
      ui_test_project_path:
        required: false
        type: string
        default: ""
      run_unit_tests:
        required: false
        type: boolean
        default: false
      run_ui_tests:
        required: false
        type: boolean
        default: false
      run_static_analysis:
        required: false
        type: boolean
        default: false
    secrets: {} # Encrypted variables (e.g. API keys, Database credentials)

jobs:
  build-and-publish:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest] # To accommodate both Linux and Windows environment

    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ inputs.dotnet_version }}

      - name: Display OS Info
        run: |
          echo "Operating System: ${{ runner.os }}"
          dotnet --info

      - name: Restore dependencies
        run: dotnet restore ${{ inputs.project_path }}

      - name: Build application (${{ inputs.configuration }})
        run: dotnet build ${{ inputs.project_path }} -c ${{ inputs.configuration }} --no-restore

      - name: Install Chrome and ChromeDriver
        if: ${{ inputs.run_ui_tests && inputs.ui_test_project_path != '' }}
        run: |
          if [[ "$RUNNER_OS" == "Linux" ]]; then
            # Install Google Chrome directly from the official source
            wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
            echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" | sudo tee /etc/apt/sources.list.d/google-chrome.list
            sudo apt-get update
            sudo apt-get install -y google-chrome-stable
            
            # Get the installed Chrome version
            CHROME_VERSION=$(google-chrome --version | grep -oP '\d+\.\d+\.\d+')
            MAJOR_VERSION=$(echo $CHROME_VERSION | cut -d. -f1)
            
            # Get the matching ChromeDriver version
            CHROME_DRIVER_VERSION=$(curl -sS "https://chromedriver.storage.googleapis.com/LATEST_RELEASE_$MAJOR_VERSION")
            if [ -z "$CHROME_DRIVER_VERSION" ]; then
              CHROME_DRIVER_VERSION=$(curl -sS https://chromedriver.storage.googleapis.com/LATEST_RELEASE)
            fi
            echo "Using ChromeDriver version: $CHROME_DRIVER_VERSION"
            
            # Download and install ChromeDriver
            wget -N "https://chromedriver.storage.googleapis.com/$CHROME_DRIVER_VERSION/chromedriver_linux64.zip"
            unzip chromedriver_linux64.zip
            sudo mv chromedriver /usr/local/bin/chromedriver
            sudo chmod +x /usr/local/bin/chromedriver
            rm chromedriver_linux64.zip
            
            echo "CHROME_DRIVER_PATH=/usr/local/bin" >> $GITHUB_ENV
          elif [[ "$RUNNER_OS" == "Windows" ]]; then
            choco install googlechrome -y
            choco install chromedriver -y --version latest
            echo "CHROME_DRIVER_PATH=C:\\ProgramData\\chocolatey\\bin" >> $GITHUB_ENV
          fi

      # Conditional Unit Tests
      - name: Run Unit Tests
        if: ${{ inputs.run_unit_tests && inputs.unit_test_project_path != '' }}
        run: dotnet test ${{ inputs.unit_test_project_path }} --configuration ${{ inputs.configuration }} --no-build --verbosity normal

      # Conditional UI Tests
      - name: Run UI Tests
        if: ${{ inputs.run_ui_tests && inputs.ui_test_project_path != '' }}
        env:
          CHROME_DRIVER_PATH: ${{ env.CHROME_DRIVER_PATH }}
        run: dotnet test ${{ inputs.ui_test_project_path }} --configuration ${{ inputs.configuration }} --no-build --verbosity normal

      # Conditional Static Analysis
      - name: Static Code Analysis (dotnet format)
        if: ${{ inputs.run_static_analysis }}
        run: dotnet format ${{ inputs.project_path }} --verify-no-changes

      # Publish Application
      - name: Publish application (${{ inputs.configuration }})
        run: dotnet publish ${{ inputs.project_path }} -c ${{ inputs.configuration }} -o ./publish-${{ inputs.configuration }}

      # Upload Artifact
      - name: Upload artifact (${{ inputs.configuration }})
        uses: actions/upload-artifact@v4
        with:
          name: app-${{ inputs.configuration }}
          path: ./publish-${{ inputs.configuration }}
