name: Reusable CI/CD Pipeline

on:
  workflow_call:
    inputs:
      configuration:
        required: true
        type: string
      dotnet_version:
        required: true
        type: string
      project_path:
        required: true
        type: string
      ui_test_project_path:
        required: false
        type: string
        default: ""
      run_ui_tests:
        required: false
        type: boolean
        default: false
      run_static_analysis:
        required: false
        type: boolean
        default: false
    secrets: {} # Encrypted variables (e.g. API keys, Database credentials)

jobs:
  build-and-publish:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest] # To accommodate both Linux and Windows environment

    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ inputs.dotnet_version }}

      - name: Display OS Info
        run: |
          echo "Operating System: ${{ runner.os }}"
          dotnet --info

      - name: Restore dependencies
        run: dotnet restore ${{ inputs.project_path }}

      - name: Build application (${{ inputs.configuration }})
        run: dotnet build ${{ inputs.project_path }} -c ${{ inputs.configuration }} --no-restore

      # Setup Chrome (cross-platform support)
      - name: Setup Chrome
        if: ${{ inputs.run_ui_tests && inputs.ui_test_project_path != '' }}
        uses: browser-actions/setup-chrome@v1
        with:
          install-dependencies: true

        # Setup ChromeDriver (cross-platform support)
      - name: Setup ChromeDriver
        if: ${{ inputs.run_ui_tests && inputs.ui_test_project_path != '' }}
        uses: nanasess/setup-chromedriver@v2
        with:
          chromeapp: chrome

      # Run ChromeDriver in the background on Ubuntu
      - name: Start ChromeDriver on Ubuntu
        if: ${{ matrix.os == 'ubuntu-latest' && inputs.run_ui_tests && inputs.ui_test_project_path != '' }}
        run: |
          export DISPLAY=:99
          sudo Xvfb -ac :99 -screen 0 1280x1024x24 > /dev/null 2>&1 &
          chromedriver --url-base=/wd/hub &

      # Run ChromeDriver on Windows
      - name: Start ChromeDriver on Windows
        if: ${{ matrix.os == 'windows-latest' && inputs.run_ui_tests && inputs.ui_test_project_path != '' }}
        run: chromedriver --url-base=/wd/hub &

      # Conditional UI Tests
      - name: Run UI Tests
        if: ${{ inputs.run_ui_tests && inputs.ui_test_project_path != '' }}
        run: dotnet test ${{ inputs.ui_test_project_path }} --configuration ${{ inputs.configuration }} --verbosity normal

      # Conditional Static Analysis
      - name: Static Code Analysis (dotnet format)
        if: ${{ inputs.run_static_analysis }}
        run: dotnet format ${{ inputs.project_path }} --verify-no-changes

      # Publish Application
      - name: Publish application (${{ inputs.configuration }})
        run: dotnet publish ${{ inputs.project_path }} -c ${{ inputs.configuration }} -o ./publish-${{ inputs.configuration }}

      # Upload Artifact
      - name: Upload artifact (${{ inputs.configuration }} on ${{ matrix.os }})
        uses: actions/upload-artifact@v4
        with:
          name: app-${{ inputs.configuration }}-${{ matrix.os }}
          path: ./publish-${{ inputs.configuration }}
